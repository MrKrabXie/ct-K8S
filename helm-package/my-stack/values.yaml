# Default values for my-stack.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
#
#redis:
#  architecture: standalone
#  auth:
#    ## @param auth.enabled Enable password authentication
#    ##
#    enabled: true
#    ## @param auth.sentinel Enable password authentication on sentinels too
#    ##
#    sentinel: true
#    ## @param auth.password Redis&reg; password
#    ## Defaults to a random 10-character alphanumeric string if not set
#    ##
#    password: "yk2017!!"

redis-cluster:
  usePassword: true
  password: "yk2017!!"
  cluster:
    nodes: 3
    replicas: 1

zookeeper:
  replicaCount: 3

mysql:
  auth:
    rootPassword: "root"
    database: test
    username: "crab"
    password: "crab"
  initdbScriptsConfigMap: "mysql-init-sql-1"

rocketmq:
  dashboard:
    enabled: true

activemq:
  artemisUser: admin
  artemisPassword: admin
  replicas: 1

nacos:
  storage:
    db:
      host: my-stack-mysql
      username: crab
      password: crab

xxl-job-admin:
  env:
    params: "--spring.datasource.url=jdbc:mysql://my-stack-mysql:3306/xxl_job?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai --spring.datasource.username=root --spring.datasource.password=root"

cognition-screening:
  env:
    nacosHost: nacos-cs
    cogRegisterPort: 8848  # 假设这是你的 MySQL 端口号